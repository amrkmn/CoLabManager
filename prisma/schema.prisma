generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum ProjectMemberRole {
    Member
    Admin
}

enum KanbanColumnStatus {
    Todo
    InProgress
    Done
}

model User {
    id                String   @id @default(cuid())
    name              String
    email             String   @unique
    password          String
    contactNumber     String
    role              Role     @default(User)
    profilePictureUrl String?
    createAt          DateTime @default(now())
    emailVerified     Boolean  @default(false)
    verificationToken String?
    inviteToken       String?

    projects           Project[]
    tasks              Task[]
    files              File[]
    messages           Message[]
    sessions           Session[]
    projectMemberships ProjectMember[]
}

model Project {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    createdBy   String

    user     User            @relation(fields: [createdBy], references: [id])
    tasks    Task[]
    files    File[]
    messages Message[]
    members  ProjectMember[]
}

model Task {
    id          String             @id @default(cuid())
    title       String
    description String
    priority    Int
    status      KanbanColumnStatus @default(Todo)
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    userId      String
    projectId   String

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
    file    File[]
}

model File {
    id         String   @id @default(cuid())
    name       String
    path       String
    uploadedAt DateTime @default(now())
    uploadedBy String
    projectId  String
    taskId     String?

    user    User    @relation(fields: [uploadedBy], references: [id])
    project Project @relation(fields: [projectId], references: [id])
    task    Task?   @relation(fields: [taskId], references: [id])
}

model Message {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    senderId  String
    projectId String

    user    User    @relation(fields: [senderId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}

model ProjectMember {
    id        String            @id @default(cuid())
    userId    String
    projectId String
    role      ProjectMemberRole

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}
