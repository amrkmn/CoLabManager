// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum TaskStatus {
    Pending
    InProgress
    Completed
}

model User {
    id                String   @id @default(cuid())
    name              String
    email             String   @unique
    password          String
    contactNumber     String
    role              Role     @default(User)
    profilePictureUrl String?
    createAt          DateTime @default(now())

    projects        Project[]
    tasks           Task[]
    files           File[]
    messages        Message[]
    progressUpdates ProgressUpdate[]
    sessions        Session[]
}

model Project {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    createdBy   String

    user            User             @relation(fields: [createdBy], references: [id])
    tasks           Task[]
    files           File[]
    messages        Message[]
    progressUpdates ProgressUpdate[]
}

model Task {
    id          String     @id @default(cuid())
    name        String
    description String?
    status      TaskStatus
    dueDate     DateTime?
    assignTo    String
    projectId   String

    user            User             @relation(fields: [assignTo], references: [id])
    project         Project          @relation(fields: [projectId], references: [id])
    progressUpdates ProgressUpdate[]
}

model File {
    id         String   @id @default(cuid())
    name       String
    path       String
    uploadedAt DateTime @default(now())
    uploadedBy String
    projectId  String

    user    User    @relation(fields: [uploadedBy], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model Message {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    senderId  String
    projectId String

    user    User    @relation(fields: [senderId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model ProgressUpdate {
    id        String   @id @default(cuid())
    text      String
    updatedAt DateTime @default(now())
    updatedBy String
    projectId String
    taskId    String

    user    User    @relation(fields: [updatedBy], references: [id])
    project Project @relation(fields: [projectId], references: [id])
    task    Task    @relation(fields: [taskId], references: [id])
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}
