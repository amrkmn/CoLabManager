// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output = "../generated/prisma"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
    Student
    Instructor
    Admin
}

enum TaskStatus {
    Pending
    InProgress
    Completed
}

model User {
    id            Int      @id @default(autoincrement())
    name          String
    email         String   @unique
    password      String
    contactNumber String
    role          Role     @default(Student)
    createAt      DateTime @default(now())

    project        Project[]
    task           Task[]
    file           File[]
    message        Message[]
    progressUpdate ProgressUpdate[]
}

model Project {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    createdBy   Int

    user           User             @relation(fields: [createdBy], references: [id])
    task           Task[]
    file           File[]
    message        Message[]
    progressUpdate ProgressUpdate[]
}

model Task {
    id          Int        @id @default(autoincrement())
    name        String
    description String?
    status      TaskStatus
    dueDate     DateTime?
    assignTo    Int
    projectId   Int

    user           User             @relation(fields: [assignTo], references: [id])
    project        Project          @relation(fields: [projectId], references: [id])
    progressUpdate ProgressUpdate[]
}

model File {
    id         Int      @id @default(autoincrement())
    name       String
    path       String
    uploadedAt DateTime @default(now())
    uploadedBy Int
    projectId  Int

    user    User    @relation(fields: [uploadedBy], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model Message {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    senderId  Int
    projectId Int

    user    User    @relation(fields: [senderId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model ProgressUpdate {
    id        Int      @id @default(autoincrement())
    text      String
    updatedAt DateTime @default(now())
    updatedBy Int
    projectId Int
    taskId    Int

    user    User    @relation(fields: [updatedBy], references: [id])
    project Project @relation(fields: [projectId], references: [id])
    task    Task    @relation(fields: [taskId], references: [id])
}
